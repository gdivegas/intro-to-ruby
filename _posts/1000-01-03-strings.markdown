---
title: Strings
layout: post
date: 1000-01-03
permalink: strings
program: back-end
tags: back-end
---

In Ruby, a String is a series of characters between quotation marks:

```ruby
"here is a string"
"1234567"
"**** this is another string ****"
```

## Our First Program

Let's write a program where we we print strings. First, we'll need to make a file and save it as `strings.rb`.

```ruby
print "here is a string"
print "1234567"
print "**** this is another string ****"
```

To run this program, type `ruby strings.rb` from the command line.

Using print does not add a line between each string. If we want to do that, we can use puts:

```ruby
puts "here is a string"
puts "1234567"
puts "**** this is another string ****"
```

<div class="try-it">
<h2>Try it: Printing Strings</h2>

<p>Write a program that prints out your name, location, and email address each separated by a line of dashes.</p>

<pre>Rachel Warbelow
---------------
Las Vegas, NV
---------------
rachel@girldevelopit.com</pre>
</div>

## Assigning Strings to Variables

We can save strings to variables:

```ruby
email = "rachel@girldevelopit.com"
location = "Las Vegas, NV"
first_name = "Rachel"
```

Notice that these variables start with a lower case letter and can include underscores (_). Variable names should express what value is stored inside so that they can be understood by someone who has no idea what your program does. Additionally, your variable names should be unique unless you are purposefully trying to overwrite an existing variable. 

We can print these variables:

```ruby
email = "rachel@girldevelopit.com"
location = "Las Vegas, NV"
first_name = "Rachel"

puts first_name
puts email
puts location
```

Even better, we can use string interpolation to combine:

```ruby
email = "rachel@girldevelopit.com"
location = "Las Vegas, NV"
first_name = "Rachel"

puts "#{first_name} lives at #{location}. Her email address is #{email}."
```

<div class="try-it">
<h2>Try it: Interpolating Strings</h2>

<p>Write a program that assigns variables pet_name, food, and toy. Interpolate those variables into a string to output something like this:</p>

<pre>fluffy plays with stuffed mice after eating tuna fish.</pre>
Run your program a few times with different values for each variable to make sure it works.
</div>

## Reassigning Variables

Variables can be reassigned with different values during the course of the program. For example, I could change any or all of the variables in my program and use them in a statement. Look at the code below. Predict what would be printed out when I run this program: 

```ruby
email = "rachel@girldevelopit.com"
location = "Las Vegas, NV"
first_name = "Rachel"

puts "#{first_name} lives at #{location}. Her email address is #{email}."

location = "Denver, CO"

puts "#{first_name} lives at #{location}. Her email address is #{email}."
```

<div class="try-it">
<h2>Try it: Reassigning Variables</h2>

<p>Go back to your pet program. After you print out the initial line, change the values for the food and toy. Add one more puts line to print out the new values.</p>
</div>

## String Methods

You can think of a method as a command. With a dog, one command you might give is "bark". In code, we might represent this as:

```ruby
dog.bark
```

This is called "dot notation" and the terminology is "call the bark method on dog".

Strings also have methods. Here are some common ones:

```ruby
message = "Hello, World!"

puts message.capitalize
puts message.upcase
puts message.downcase
puts message.include?("World")
puts message.include?("Mars")
puts message.reverse
puts message.length
puts message.swapcase
puts message.empty? 
```

<div class="try-it">
<h2>Try it: Using String Methods</h2>

<p>Modify your program to capitalize the pet_name, reverse the food, and upcase the toy.</p>

<pre>Fluffy plays with STUFFED MICE after eating hsif anut.</pre>
Run your program a few times with different values for each variable to make sure it works.
</div>
